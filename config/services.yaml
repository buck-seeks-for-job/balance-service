# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Iqoption\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Iqoption\BalanceService\Infrastructure\Presentation\Controller\:
        resource: '../src/BalanceService/Infrastructure/Presentation/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    iqoption.account_repository:
        class: Iqoption\BalanceService\Infrastructure\Persistence\DoctrineAccountRepository
        factory: ["@doctrine.orm.entity_manager", getRepository]
        arguments: [Iqoption\BalanceService\Domain\Account\Account]

    Iqoption\BalanceService\Domain\Account\AccountRepository:
        alias: iqoption.account_repository

    iqoption.transaction_repository:
        class: Iqoption\BalanceService\Infrastructure\Persistence\DoctrineTransactionRepository
        factory: ["@doctrine.orm.entity_manager", getRepository]
        arguments: [Iqoption\BalanceService\Domain\Transaction\Transaction]

    Iqoption\BalanceService\Domain\Transaction\TransactionRepostory:
        alias: iqoption.transaction_repository

    iqoption.database_transaction_manager:
        class: Iqoption\BalanceService\Infrastructure\Persistence\DoctrineTransactionManager
        arguments:
            - "@doctrine.orm.entity_manager"

    Iqoption\BalanceService\Domain\DatabaseTransactionManager:
        alias: iqoption.database_transaction_manager

    iqoption.event_publisher:
        class: Iqoption\BalanceService\Infrastructure\Amqp\AmqpEventPublisher

    Iqoption\BalanceService\Domain\Event\EventPublisher:
        alias: iqoption.event_publisher

    iqoption.balance_calculator:
        class: Iqoption\BalanceService\Infrastructure\Persistence\DoctrineBalanceCalculator
        arguments:
            - "@doctrine.orm.entity_manager"

    Iqoption\BalanceService\Domain\BalanceCalculator:
        alias: iqoption.balance_calculator

    default.amqp.connection:
        class: PhpAmqpLib\Connection\AMQPLazyConnection
        arguments:
            - '%env(RABBITMQ_HOST)%'
            - '%env(RABBITMQ_PORT)%'
            - '%env(RABBITMQ_DEFAULT_USER)%'
            - '%env(RABBITMQ_DEFAULT_PASS)%'
            - '%env(RABBITMQ_DEFAULT_VHOST)%'

    PhpAmqpLib\Connection\AMQPLazyConnection:
        alias: default.amqp.connection

    iqoption.default_amqp_consumer_gateway:
        class: Iqoption\BalanceService\Infrastructure\Amqp\DefaultAmqpConsumerGateway
        arguments:
            - '@default.amqp.connection'

    Iqoption\BalanceService\Infrastructure\Amqp\AmqpConsumerGatewayInterface:
        alias: iqoption.default_amqp_consumer_gateway

    iqoption.queue_listener_command.logger:
        class: Monolog\Logger
        arguments:
            - 'QueueListenerErrors'

    Iqoption\BalanceService\Infrastructure\Presentation\Command\QueueListenerCommand:
        arguments:
            - '@Iqoption\BalanceService\Application\Deposit\DepositPerformer'
            - '@Iqoption\BalanceService\Application\Withdraw\WithdrawPerformer'
            - '@Iqoption\BalanceService\Application\Transfer\TransferPerformer'
            - '@iqoption.default_amqp_consumer_gateway'
            - '@jms_serializer.serializer'
            - '@iqoption.queue_listener_command.logger'

    JMS\Serializer\Serializer:
        alias: jms_serializer.serializer